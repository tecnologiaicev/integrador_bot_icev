from app.controllers import bp
from extensions import db
from flask import Flask, jsonify, request
from app.service.icev_digital_service import buscar_quiz, verify_token

@bp.route('/buscarquiz', methods=['GET'])
def select_dados():
    """
    Endpoint para buscar dados do quiz.

    Requer um token de autoriza√ß√£o no cabe√ßalho da requisi√ß√£o.
    
    Par√¢metros (query string):
    - `inicio` (str): Data inicial do per√≠odo de busca (YYYY-MM-DD).
    - `fim` (str): Data final do per√≠odo de busca (YYYY-MM-DD).
    - `id` (int): ID da disciplina.

    Retorno:
    - JSON com os dados do quiz (caso sucesso).
    - JSON com mensagem de erro (caso falha).
    """

    # üîπ Obt√©m o token do cabe√ßalho da requisi√ß√£o
    auth_header = request.headers.get('Authorization')

    # Verifica se o token est√° presente
    if not auth_header:
        return jsonify({"message": "Token n√£o fornecido"}), 401

    try:
        # Extrai apenas o token (removendo "Bearer " se presente)
        token = auth_header.split(" ")[-1]
    except IndexError:
        return jsonify({"message": "Formato do token inv√°lido"}), 400

    # üîπ Verifica se o token √© v√°lido
    if not verify_token(token):
        return jsonify({"message": "Token inv√°lido"}), 403

    # üîπ Obt√©m os par√¢metros da query string
    data_inicio = request.args.get('inicio')  # Data de in√≠cio
    data_fim = request.args.get('fim')  # Data de fim
    id_disc = request.args.get("id")  # ID da disciplina
    username = request.args.get("username")  # ID da disciplina
    # üîπ Valida se os par√¢metros necess√°rios foram passados
    if not all([data_inicio, data_fim, id_disc]):
        return jsonify({"message": "Par√¢metros 'inicio', 'fim' e 'id' s√£o obrigat√≥rios"}), 400

    # üîπ Busca os dados no banco de dados
    dados = buscar_quiz(id_disc, data_inicio, data_fim,username)
    print("dados",dados)
    return dados  # Retorna os dados com status HTTP 200 (OK)
